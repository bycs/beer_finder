# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: test

on:
  push:
  pull_request:
    branches: [ master, dev ]

jobs:
  test:

    runs-on: ubuntu-latest
    env:
      DB_HOST: localhost
      DB_USER: github_actions
      DB_PASS: github_actions
      DB_NAME: github_actions
      DJANGO_SECRET_KEY: django_secret_key
      DJANGO_ALLOWED_HOSTS: localhost
      DJANGO_CSRF_TRUSTED_ORIGINS: http://localhost

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: github_actions
          POSTGRES_PASSWORD: github_actions
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.2.0
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install library
      run: poetry install --no-interaction

    - name: venv activate
      run: source .venv/bin/activate

    - name: Run migrations
      run: poetry run python manage.py migrate

    - name: Run PyTest
      run: poetry run pytest
